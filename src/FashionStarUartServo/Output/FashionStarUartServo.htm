<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\Output\FashionStarUartServo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\Output\FashionStarUartServo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Jun 20 13:32:38 2020
<BR><P>
<H3>Maximum Stack Usage =        632 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; FSARM_Init &rArr; FSARM_Home &rArr; FSARM_MoveP2P &rArr; FSARM_InverseKinematics &rArr; FSUS_QueryServoAngle &rArr; FSUS_RecvPackage &rArr; FSUS_CalcChecksum &rArr; FSUS_Package2RingBuffer &rArr; RingBuffer_WriteUShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[39]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from sys_tick.o(i.SysTick_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from usart.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[38]">fputc</a> from main.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[35]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[cd]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[52]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ce]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[cf]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[d0]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[d1]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[d2]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[39]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_SetGripperAngle
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustServoAngle
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_JointAngle2ServoAngle
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_InverseKinematics
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustServoAngle
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_Wait
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_SetServoAngle
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_ServoAngle2JointAngle
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_MoveP2P
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_InverseKinematics
</UL>

<P><STRONG><a name="[40]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_InverseKinematics
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_SetServoAngle
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_SetGripperAngle
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustServoAngle
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_SetServoAngle
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_MoveP2P
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_JointAngle2ServoAngle
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustServoAngle
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_SetServoAngle
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_ServoAngle2JointAngle
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_MoveP2P
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_InverseKinematics
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_InverseKinematics
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_Wait
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_InverseKinematics
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_InverseKinematics
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_Calibration
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_QueryServoAngle
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_InverseKinematics
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_Calibration
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_InverseKinematics
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_QueryServoAngle
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_SetServoAngle
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustServoAngle
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_SetServoAngle
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_MoveP2P
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeServo
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustServoAngle
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_Wait
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_SetServoAngle
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_MoveP2P
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_InverseKinematics
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_Calibration
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_InverseKinematics
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_Wait
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_InverseKinematics
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_QueryServoAngle
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_Wait
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_InverseKinematics
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_Calibration
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_InverseKinematics
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustServoAngle
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_SetAngleRange
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_IsJointLegal
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustServoAngle
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_IsJointLegal
</UL>

<P><STRONG><a name="[d3]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[d4]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[d5]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[d6]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[3d]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[46]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[45]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[bc]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[d8]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[d9]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[55]"></a>AdjustServoAngle</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, main.o(i.AdjustServoAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = AdjustServoAngle &rArr; FSUS_SetServoAngle &rArr; FSUS_SendPackage &rArr; FSUS_Package2RingBuffer &rArr; RingBuffer_WriteUShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_SetServoAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key4PressedHandler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key3PressedHandler
</UL>

<P><STRONG><a name="[5b]"></a>Button_GPIO</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, button.o(i.Button_GPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Button_GPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
</UL>

<P><STRONG><a name="[5e]"></a>Button_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, button.o(i.Button_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Button_Init &rArr; Button_GPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_KeyStatusInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_GPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>Button_KeyLevelScan</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, button.o(i.Button_KeyLevelScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Button_KeyLevelScan
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>Button_KeyStatusInit</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, button.o(i.Button_KeyStatusInit))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
</UL>

<P><STRONG><a name="[62]"></a>Button_KeyStatusUpdate</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, button.o(i.Button_KeyStatusUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Button_KeyStatusUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Millis
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_KeyStatusUpdateAll
</UL>

<P><STRONG><a name="[64]"></a>Button_KeyStatusUpdateAll</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, button.o(i.Button_KeyStatusUpdateAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Button_KeyStatusUpdateAll &rArr; Button_KeyStatusUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_KeyStatusUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>ChangeServo</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(i.ChangeServo))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ChangeServo &rArr; FSUS_QueryServoAngle &rArr; FSUS_RecvPackage &rArr; FSUS_CalcChecksum &rArr; FSUS_Package2RingBuffer &rArr; RingBuffer_WriteUShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_QueryServoAngle
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyAPressedHandler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key2PressedHandler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key1PressedHandler
</UL>

<P><STRONG><a name="[68]"></a>FSARM_Calibration</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, arm5dof.o(i.FSARM_Calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = FSARM_Calibration &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_Init
</UL>

<P><STRONG><a name="[69]"></a>FSARM_Home</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, arm5dof.o(i.FSARM_Home))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = FSARM_Home &rArr; FSARM_MoveP2P &rArr; FSARM_InverseKinematics &rArr; FSUS_QueryServoAngle &rArr; FSUS_RecvPackage &rArr; FSUS_CalcChecksum &rArr; FSUS_Package2RingBuffer &rArr; RingBuffer_WriteUShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_WaitAll
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_MoveP2P
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyAPressedHandler
</UL>

<P><STRONG><a name="[6c]"></a>FSARM_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, arm5dof.o(i.FSARM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = FSARM_Init &rArr; FSARM_Home &rArr; FSARM_MoveP2P &rArr; FSARM_InverseKinematics &rArr; FSUS_QueryServoAngle &rArr; FSUS_RecvPackage &rArr; FSUS_CalcChecksum &rArr; FSUS_Package2RingBuffer &rArr; RingBuffer_WriteUShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_SetGripperAngle
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_Home
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_SetSpeed
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_SetAngleRange
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_Calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>FSARM_InverseKinematics</STRONG> (Thumb, 1566 bytes, Stack size 160 bytes, arm5dof.o(i.FSARM_InverseKinematics))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = FSARM_InverseKinematics &rArr; FSUS_QueryServoAngle &rArr; FSUS_RecvPackage &rArr; FSUS_CalcChecksum &rArr; FSUS_Package2RingBuffer &rArr; RingBuffer_WriteUShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_QueryServoAngle
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_IsJointLegal
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_MoveP2P
</UL>

<P><STRONG><a name="[76]"></a>FSARM_IsJointLegal</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, arm5dof.o(i.FSARM_IsJointLegal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FSARM_IsJointLegal
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_InverseKinematics
</UL>

<P><STRONG><a name="[7a]"></a>FSARM_JointAngle2ServoAngle</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, arm5dof.o(i.FSARM_JointAngle2ServoAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FSARM_JointAngle2ServoAngle &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_SetJointAngle
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_SetAngleRange
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_MoveP2P
</UL>

<P><STRONG><a name="[6a]"></a>FSARM_MoveP2P</STRONG> (Thumb, 366 bytes, Stack size 136 bytes, arm5dof.o(i.FSARM_MoveP2P))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = FSARM_MoveP2P &rArr; FSARM_InverseKinematics &rArr; FSUS_QueryServoAngle &rArr; FSUS_RecvPackage &rArr; FSUS_CalcChecksum &rArr; FSUS_Package2RingBuffer &rArr; RingBuffer_WriteUShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_SetServoAngle
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_QueryServoAngle
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_JointAngle2ServoAngle
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_InverseKinematics
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_Home
</UL>

<P><STRONG><a name="[7c]"></a>FSARM_QueryJointAngle</STRONG> (Thumb, 30 bytes, Stack size 40 bytes, arm5dof.o(i.FSARM_QueryJointAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = FSARM_QueryJointAngle &rArr; FSARM_QueryServoAngle &rArr; FSUS_QueryServoAngle &rArr; FSUS_RecvPackage &rArr; FSUS_CalcChecksum &rArr; FSUS_Package2RingBuffer &rArr; RingBuffer_WriteUShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_ServoAngle2JointAngle
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_QueryServoAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_SetTorque
</UL>

<P><STRONG><a name="[7b]"></a>FSARM_QueryServoAngle</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, arm5dof.o(i.FSARM_QueryServoAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = FSARM_QueryServoAngle &rArr; FSUS_QueryServoAngle &rArr; FSUS_RecvPackage &rArr; FSUS_CalcChecksum &rArr; FSUS_Package2RingBuffer &rArr; RingBuffer_WriteUShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_QueryServoAngle
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_SetCurServoAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_Update
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_SetServoAngle
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_QueryJointAngle
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_MoveP2P
</UL>

<P><STRONG><a name="[7d]"></a>FSARM_ServoAngle2JointAngle</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, arm5dof.o(i.FSARM_ServoAngle2JointAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FSARM_ServoAngle2JointAngle &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_QueryJointAngle
</UL>

<P><STRONG><a name="[6d]"></a>FSARM_SetAngleRange</STRONG> (Thumb, 320 bytes, Stack size 96 bytes, arm5dof.o(i.FSARM_SetAngleRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = FSARM_SetAngleRange &rArr; FSARM_JointAngle2ServoAngle &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_JointAngle2ServoAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_Init
</UL>

<P><STRONG><a name="[7e]"></a>FSARM_SetCurServoAngle</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, arm5dof.o(i.FSARM_SetCurServoAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FSARM_SetCurServoAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_Update
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_QueryServoAngle
</UL>

<P><STRONG><a name="[7f]"></a>FSARM_SetDamping</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, arm5dof.o(i.FSARM_SetDamping))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = FSARM_SetDamping &rArr; FSUS_DampingMode &rArr; FSUS_SendPackage &rArr; FSUS_Package2RingBuffer &rArr; RingBuffer_WriteUShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_DampingMode
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_SetTorque
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBPressedHandler
</UL>

<P><STRONG><a name="[6f]"></a>FSARM_SetGripperAngle</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, arm5dof.o(i.FSARM_SetGripperAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = FSARM_SetGripperAngle &rArr; FSUS_SetServoAngle &rArr; FSUS_SendPackage &rArr; FSUS_Package2RingBuffer &rArr; RingBuffer_WriteUShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_SetServoAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyAPressedHandler
</UL>

<P><STRONG><a name="[81]"></a>FSARM_SetJointAngle</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, arm5dof.o(i.FSARM_SetJointAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = FSARM_SetJointAngle &rArr; FSARM_SetServoAngle &rArr; FSARM_QueryServoAngle &rArr; FSUS_QueryServoAngle &rArr; FSUS_RecvPackage &rArr; FSUS_CalcChecksum &rArr; FSUS_Package2RingBuffer &rArr; RingBuffer_WriteUShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_SetServoAngle
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_JointAngle2ServoAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_SetTorque
</UL>

<P><STRONG><a name="[83]"></a>FSARM_SetNextServoAngle</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, arm5dof.o(i.FSARM_SetNextServoAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FSARM_SetNextServoAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_SetServoAngle
</UL>

<P><STRONG><a name="[82]"></a>FSARM_SetServoAngle</STRONG> (Thumb, 366 bytes, Stack size 72 bytes, arm5dof.o(i.FSARM_SetServoAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = FSARM_SetServoAngle &rArr; FSARM_QueryServoAngle &rArr; FSUS_QueryServoAngle &rArr; FSUS_RecvPackage &rArr; FSUS_CalcChecksum &rArr; FSUS_Package2RingBuffer &rArr; RingBuffer_WriteUShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_SetServoAngle
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_SetNextServoAngle
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_QueryServoAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_SetJointAngle
</UL>

<P><STRONG><a name="[6e]"></a>FSARM_SetSpeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, arm5dof.o(i.FSARM_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_Init
</UL>

<P><STRONG><a name="[84]"></a>FSARM_SetTorque</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, arm5dof.o(i.FSARM_SetTorque))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = FSARM_SetTorque &rArr; FSARM_SetJointAngle &rArr; FSARM_SetServoAngle &rArr; FSARM_QueryServoAngle &rArr; FSUS_QueryServoAngle &rArr; FSUS_RecvPackage &rArr; FSUS_CalcChecksum &rArr; FSUS_Package2RingBuffer &rArr; RingBuffer_WriteUShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_SetDamping
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_SetJointAngle
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_QueryJointAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBPressedHandler
</UL>

<P><STRONG><a name="[85]"></a>FSARM_Update</STRONG> (Thumb, 26 bytes, Stack size 32 bytes, arm5dof.o(i.FSARM_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = FSARM_Update &rArr; FSARM_QueryServoAngle &rArr; FSUS_QueryServoAngle &rArr; FSUS_RecvPackage &rArr; FSUS_CalcChecksum &rArr; FSUS_Package2RingBuffer &rArr; RingBuffer_WriteUShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_SetCurServoAngle
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_QueryServoAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_Wait
</UL>

<P><STRONG><a name="[86]"></a>FSARM_Wait</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, arm5dof.o(i.FSARM_Wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = FSARM_Wait &rArr; FSARM_Update &rArr; FSARM_QueryServoAngle &rArr; FSUS_QueryServoAngle &rArr; FSUS_RecvPackage &rArr; FSUS_CalcChecksum &rArr; FSUS_Package2RingBuffer &rArr; RingBuffer_WriteUShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Millis
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_WaitAll
</UL>

<P><STRONG><a name="[6b]"></a>FSARM_WaitAll</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, arm5dof.o(i.FSARM_WaitAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = FSARM_WaitAll &rArr; FSARM_Wait &rArr; FSARM_Update &rArr; FSARM_QueryServoAngle &rArr; FSUS_QueryServoAngle &rArr; FSUS_RecvPackage &rArr; FSUS_CalcChecksum &rArr; FSUS_Package2RingBuffer &rArr; RingBuffer_WriteUShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_Home
</UL>

<P><STRONG><a name="[88]"></a>FSUS_CalcChecksum</STRONG> (Thumb, 50 bytes, Stack size 80 bytes, fashion_star_uart_servo.o(i.FSUS_CalcChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = FSUS_CalcChecksum &rArr; FSUS_Package2RingBuffer &rArr; RingBuffer_WriteUShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_Package2RingBuffer
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_GetValueByIndex
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_GetByteUsed
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_RecvPackage
</UL>

<P><STRONG><a name="[80]"></a>FSUS_DampingMode</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, fashion_star_uart_servo.o(i.FSUS_DampingMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = FSUS_DampingMode &rArr; FSUS_SendPackage &rArr; FSUS_Package2RingBuffer &rArr; RingBuffer_WriteUShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_SendPackage
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_WriteUShort
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_WriteByte
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_SetDamping
</UL>

<P><STRONG><a name="[8a]"></a>FSUS_Package2RingBuffer</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, fashion_star_uart_servo.o(i.FSUS_Package2RingBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FSUS_Package2RingBuffer &rArr; RingBuffer_WriteUShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_WriteUShort
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_WriteByteArray
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_WriteByte
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_GetChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_SendPackage
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_CalcChecksum
</UL>

<P><STRONG><a name="[66]"></a>FSUS_QueryServoAngle</STRONG> (Thumb, 104 bytes, Stack size 112 bytes, fashion_star_uart_servo.o(i.FSUS_QueryServoAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = FSUS_QueryServoAngle &rArr; FSUS_RecvPackage &rArr; FSUS_CalcChecksum &rArr; FSUS_Package2RingBuffer &rArr; RingBuffer_WriteUShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_SendPackage
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_RecvPackage
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key4PressedHandler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key3PressedHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeServo
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_QueryServoAngle
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_InverseKinematics
</UL>

<P><STRONG><a name="[92]"></a>FSUS_RecvPackage</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, fashion_star_uart_servo.o(i.FSUS_RecvPackage))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = FSUS_RecvPackage &rArr; FSUS_CalcChecksum &rArr; FSUS_Package2RingBuffer &rArr; RingBuffer_WriteUShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_CalcChecksum
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CountdownIsTimeout
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CountdownCancel
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CountdownBegin
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_ReadByte
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_GetByteUsed
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_QueryServoAngle
</UL>

<P><STRONG><a name="[8f]"></a>FSUS_SendPackage</STRONG> (Thumb, 62 bytes, Stack size 80 bytes, fashion_star_uart_servo.o(i.FSUS_SendPackage))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = FSUS_SendPackage &rArr; FSUS_Package2RingBuffer &rArr; RingBuffer_WriteUShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_Package2RingBuffer
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_DampingMode
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_SetServoAngle
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_QueryServoAngle
</UL>

<P><STRONG><a name="[5a]"></a>FSUS_SetServoAngle</STRONG> (Thumb, 116 bytes, Stack size 64 bytes, fashion_star_uart_servo.o(i.FSUS_SetServoAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = FSUS_SetServoAngle &rArr; FSUS_SendPackage &rArr; FSUS_Package2RingBuffer &rArr; RingBuffer_WriteUShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_SendPackage
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_WriteUShort
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_WriteShort
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_WriteByte
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_SetGripperAngle
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key4PressedHandler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key3PressedHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustServoAngle
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_SetServoAngle
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_MoveP2P
</UL>

<P><STRONG><a name="[5d]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_GPIO
</UL>

<P><STRONG><a name="[61]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_KeyLevelScan
</UL>

<P><STRONG><a name="[9b]"></a>Key1PressedHandler</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, main.o(i.Key1PressedHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Key1PressedHandler &rArr; ChangeServo &rArr; FSUS_QueryServoAngle &rArr; FSUS_RecvPackage &rArr; FSUS_CalcChecksum &rArr; FSUS_Package2RingBuffer &rArr; RingBuffer_WriteUShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeServo
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>Key2PressedHandler</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, main.o(i.Key2PressedHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Key2PressedHandler &rArr; ChangeServo &rArr; FSUS_QueryServoAngle &rArr; FSUS_RecvPackage &rArr; FSUS_CalcChecksum &rArr; FSUS_Package2RingBuffer &rArr; RingBuffer_WriteUShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeServo
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>Key3PressedHandler</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, main.o(i.Key3PressedHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Key3PressedHandler &rArr; FSUS_QueryServoAngle &rArr; FSUS_RecvPackage &rArr; FSUS_CalcChecksum &rArr; FSUS_Package2RingBuffer &rArr; RingBuffer_WriteUShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_SetServoAngle
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_QueryServoAngle
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustServoAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>Key4PressedHandler</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, main.o(i.Key4PressedHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Key4PressedHandler &rArr; FSUS_QueryServoAngle &rArr; FSUS_RecvPackage &rArr; FSUS_CalcChecksum &rArr; FSUS_Package2RingBuffer &rArr; RingBuffer_WriteUShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_SetServoAngle
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_QueryServoAngle
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustServoAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>KeyAPressedHandler</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, main.o(i.KeyAPressedHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = KeyAPressedHandler &rArr; FSARM_Home &rArr; FSARM_MoveP2P &rArr; FSARM_InverseKinematics &rArr; FSUS_QueryServoAngle &rArr; FSUS_RecvPackage &rArr; FSUS_CalcChecksum &rArr; FSUS_Package2RingBuffer &rArr; RingBuffer_WriteUShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_SetGripperAngle
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_Home
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeServo
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>KeyBPressedHandler</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, main.o(i.KeyBPressedHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = KeyBPressedHandler &rArr; FSARM_SetTorque &rArr; FSARM_SetJointAngle &rArr; FSARM_SetServoAngle &rArr; FSARM_QueryServoAngle &rArr; FSUS_QueryServoAngle &rArr; FSUS_RecvPackage &rArr; FSUS_CalcChecksum &rArr; FSUS_Package2RingBuffer &rArr; RingBuffer_WriteUShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_SetTorque
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_SetDamping
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Init
</UL>

<P><STRONG><a name="[b1]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Init
</UL>

<P><STRONG><a name="[b5]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Init
</UL>

<P><STRONG><a name="[5c]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_GPIO
</UL>

<P><STRONG><a name="[af]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[a1]"></a>RingBuffer_GetByteFree</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, ring_buffer.o(i.RingBuffer_GetByteFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_GetCapacity
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_GetByteUsed
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_IsFull
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_IsEmpty
</UL>

<P><STRONG><a name="[8b]"></a>RingBuffer_GetByteUsed</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, ring_buffer.o(i.RingBuffer_GetByteUsed))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_GetCapacity
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_RecvPackage
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_CalcChecksum
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_GetValueByIndex
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_GetChecksum
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_GetByteFree
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendAll
</UL>

<P><STRONG><a name="[a2]"></a>RingBuffer_GetCapacity</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ring_buffer.o(i.RingBuffer_GetCapacity))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_IsEmpty
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_GetByteFree
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_GetByteUsed
</UL>

<P><STRONG><a name="[91]"></a>RingBuffer_GetChecksum</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, ring_buffer.o(i.RingBuffer_GetChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RingBuffer_GetChecksum &rArr; RingBuffer_GetValueByIndex &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_GetValueByIndex
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_GetByteUsed
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_Package2RingBuffer
</UL>

<P><STRONG><a name="[8c]"></a>RingBuffer_GetValueByIndex</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ring_buffer.o(i.RingBuffer_GetValueByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RingBuffer_GetValueByIndex &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_GetByteUsed
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_CalcChecksum
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_GetChecksum
</UL>

<P><STRONG><a name="[89]"></a>RingBuffer_Init</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, ring_buffer.o(i.RingBuffer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RingBuffer_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_DampingMode
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_CalcChecksum
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_SetServoAngle
</UL>

<P><STRONG><a name="[a3]"></a>RingBuffer_IsEmpty</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ring_buffer.o(i.RingBuffer_IsEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_GetCapacity
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_GetByteFree
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Pop
</UL>

<P><STRONG><a name="[a4]"></a>RingBuffer_IsFull</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ring_buffer.o(i.RingBuffer_IsFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RingBuffer_IsFull &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_GetByteFree
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Push
</UL>

<P><STRONG><a name="[a5]"></a>RingBuffer_Pop</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, ring_buffer.o(i.RingBuffer_Pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_IsEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_ReadByte
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Push
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendAll
</UL>

<P><STRONG><a name="[a6]"></a>RingBuffer_Push</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, ring_buffer.o(i.RingBuffer_Push))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_IsFull
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Pop
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_WriteByteArray
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_WriteByte
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[94]"></a>RingBuffer_ReadByte</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ring_buffer.o(i.RingBuffer_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RingBuffer_ReadByte &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Pop
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_RecvPackage
</UL>

<P><STRONG><a name="[8d]"></a>RingBuffer_WriteByte</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, ring_buffer.o(i.RingBuffer_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RingBuffer_WriteByte &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Push
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_Package2RingBuffer
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_DampingMode
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_SetServoAngle
</UL>

<P><STRONG><a name="[90]"></a>RingBuffer_WriteByteArray</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, ring_buffer.o(i.RingBuffer_WriteByteArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Push
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_Package2RingBuffer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_WriteUShort
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_WriteShort
</UL>

<P><STRONG><a name="[99]"></a>RingBuffer_WriteShort</STRONG> (Thumb, 18 bytes, Stack size 20 bytes, ring_buffer.o(i.RingBuffer_WriteShort))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RingBuffer_WriteShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_WriteByteArray
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_SetServoAngle
</UL>

<P><STRONG><a name="[8e]"></a>RingBuffer_WriteUShort</STRONG> (Thumb, 18 bytes, Stack size 20 bytes, ring_buffer.o(i.RingBuffer_WriteUShort))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RingBuffer_WriteUShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_WriteByteArray
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_Package2RingBuffer
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_DampingMode
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_SetServoAngle
</UL>

<P><STRONG><a name="[93]"></a>SysTick_CountdownBegin</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sys_tick.o(i.SysTick_CountdownBegin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_CountdownBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_RecvPackage
</UL>

<P><STRONG><a name="[95]"></a>SysTick_CountdownCancel</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sys_tick.o(i.SysTick_CountdownCancel))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_RecvPackage
</UL>

<P><STRONG><a name="[96]"></a>SysTick_CountdownIsTimeout</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys_tick.o(i.SysTick_CountdownIsTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_RecvPackage
</UL>

<P><STRONG><a name="[9a]"></a>SysTick_DelayMs</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_tick.o(i.SysTick_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_SetServoAngle
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key4PressedHandler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key3PressedHandler
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sys_tick.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>SysTick_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sys_tick.o(i.SysTick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SysTick_Init &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>SysTick_Millis</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_tick.o(i.SysTick_Millis))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_KeyStatusUpdate
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_Wait
</UL>

<P><STRONG><a name="[a9]"></a>SysTick_Wait</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sys_tick.o(i.SysTick_Wait))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
</UL>

<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART1_IRQHandler &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART2_IRQHandler &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Init
</UL>

<P><STRONG><a name="[b8]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
</UL>

<P><STRONG><a name="[ac]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b3]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Init
</UL>

<P><STRONG><a name="[ae]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Init
</UL>

<P><STRONG><a name="[ad]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[b0]"></a>Usart_Init</STRONG> (Thumb, 394 bytes, Stack size 32 bytes, usart.o(i.Usart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Usart_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>Usart_SendAll</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usart.o(i.Usart_SendAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Usart_SendAll &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Pop
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_GetByteUsed
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_SendPackage
</UL>

<P><STRONG><a name="[b6]"></a>Usart_SendByte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usart.o(i.Usart_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendAll
</UL>

<P><STRONG><a name="[b9]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[da]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[67]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeServo
</UL>

<P><STRONG><a name="[db]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[dc]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[c0]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[bb]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[bd]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[be]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[bf]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[c2]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[c3]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[c4]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[c5]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[c6]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[c1]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[dd]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[de]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[df]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[cc]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[cb]"></a>atan</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[75]"></a>atan2</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, atan2.o(i.atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_InverseKinematics
</UL>

<P><STRONG><a name="[77]"></a>cos</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_InverseKinematics
</UL>

<P><STRONG><a name="[38]"></a>fputc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = main &rArr; FSARM_Init &rArr; FSARM_Home &rArr; FSARM_MoveP2P &rArr; FSARM_InverseKinematics &rArr; FSUS_QueryServoAngle &rArr; FSUS_RecvPackage &rArr; FSUS_CalcChecksum &rArr; FSUS_Package2RingBuffer &rArr; RingBuffer_WriteUShort &rArr; RingBuffer_WriteByteArray &rArr; RingBuffer_Push &rArr; RingBuffer_Pop &rArr; RingBuffer_IsEmpty &rArr; RingBuffer_GetByteFree &rArr; RingBuffer_GetByteUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_KeyStatusUpdateAll
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_KeyLevelScan
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBPressedHandler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyAPressedHandler
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key4PressedHandler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key3PressedHandler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key2PressedHandler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key1PressedHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeServo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[71]"></a>pow</STRONG> (Thumb, 2512 bytes, Stack size 128 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_InverseKinematics
</UL>

<P><STRONG><a name="[78]"></a>sin</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_InverseKinematics
</UL>

<P><STRONG><a name="[72]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSARM_InverseKinematics
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ab]"></a>SysTick_Config</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, sys_tick.o(i.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>

<P><STRONG><a name="[a7]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a8]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[c7]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ba]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[c9]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c8]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
